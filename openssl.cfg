#
# OpenSSL example configuration file.
# This is mostly being used for generation of certificate requests.
#

# This definition stops the following lines choking if HOME isn't
# defined.
HOME						= .
# RANDFILE					= $ENV::HOME/.rnd

####################################################################
[ ca ]
default_ca					= CA_default		# The default ca section

####################################################################
[ CA_default ]
dir							    = ./						          # Where everything is kept
crl_dir						  = $dir/crl					      # Where the issued crl are kept
database					  = $dir/index.txt		      # database index file.
#unique_subject				= no						        # Set to 'no' to allow creation of
														                  # several ctificates with same subject.
serial						  = $dir/serial 			      # The current serial number
crlnumber					  = $dir/crlnumber		      # the current crl number
														                  # must be commented out to leave a V1 CRL
crl							    = $dir/crl.pem 				    # The current CRL
private_key				  = $dir/private/cakey.pem	# The private key
RANDFILE					  = $dir/private/.rand		# private random number file

x509_extensions			= v3_usr_cert					# The extentions to add to the cert

# Comment out the following two lines for the "traditional" (and highly broken) format.
name_opt 					= ca_default				# Subject Name options
cert_opt 					= ca_default				# Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions			= crl_ext

default_days				  = 365					# how long to certify for
default_crl_days			= 30					# how long before next CRL
default_md					  = default			# use public key default MD
preserve					    = no					# keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy						= policy_match

# For the CA policy
[ policy_match ]
countryName					= match
stateOrProvinceName			= match
organizationName			= match
organizationalUnitName		= optional
commonName					= supplied
emailAddress				= optional

# For the 'anything' policy At this point in time, you must list all acceptable 'object' types.
[ policy_anything ]
countryName					= optional
stateOrProvinceName			= optional
localityName				= optional
organizationName			= optional
organizationalUnitName		= optional
commonName					= supplied
emailAddress				= optional

####################################################################
[ req ]
default_bits				= 2048
default_keyfile 			= privkey.pem
distinguished_name			= req_distinguished_name
#x509_extensions			= v3_usr_cert		# The extentions to add to the self signed cert
string_mask 				= utf8only
req_extensions 				= v3_req			# The extensions to add to a certificate request

# Passwords for private keys if not present they will be prompted for
#input_password 				= secret
#output_password				= secret

[ req_distinguished_name ]
countryName						= Country Name (2 letter code)
countryName_default				= US
countryName_min					= 2
countryName_max					= 2

stateOrProvinceName				= State or Province Name (full name)
stateOrProvinceName_default		= Washington

localityName					= Locality Name (eg, city)
localityName_default			= Seattle

0.organizationName				= Organization Name (eg, company)
0.organizationName_default		= The Hurst Family

organizationalUnitName			= Organizational Unit Name (eg, section)
organizationalUnitName_default	= For Test Purposes Only

commonName						= Common Name (e.g. server FQDN or YOUR name)
commonName_max					= 64
commonName_default				= Hurst Certificate Services

emailAddress					= Email Address
emailAddress_max				= 64
emailAddress_default			= rmh@example.com


[ v3_req ]
# Extensions to add to a certificate request

basicConstraints 			= CA:FALSE
keyUsage 					= nonRepudiation, digitalSignature, keyEncipherment

[ v3_rootca ]
# Extensions for a typical root CA
subjectKeyIdentifier		= hash
basicConstraints			= critical, CA:TRUE
keyUsage 					= critical, cRLSign, keyCertSign

crlDistributionPoints=URI:http://repository.examplerootca.com/testrootca.crl

[ v3_partnerca ]
# Extensions for a typical issuing CA

subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always,issuer
basicConstraints			= critical, CA:TRUE
keyUsage 					= critical, cRLSign, keyCertSign
extendedKeyUsage			= critical, clientAuth, serverAuth, emailProtection, codeSigning, timeStamping

certificatePolicies=ia5org,@rootca_polsect


crlDistributionPoints=URI:http://repository.examplerootca.com/testrootca.crl


[ v3_customerca ]
# Extensions for a typical customer CA

subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always,issuer
basicConstraints			= critical, CA:TRUE, pathlen:0
keyUsage 					= critical, cRLSign, keyCertSign
extendedKeyUsage			= critical, clientAuth, serverAuth, emailProtection
nameConstraints=@nameconstraintsect


crlDistributionPoints=URI:http://examplepartnerca.com/crls/testpartnerca.crl

certificatePolicies=ia5org,@rootca_polsect

authorityInfoAccess = @partnerca_aia


[partnerca_aia]
OCSP;URI=http://ocsp.examplerootca.com/
caIssuers;URI=http://repository.examplerootca.com/partnerca.cer

[nameconstraintsect]
permitted;email.1=example.com
permitted;DNS.1=example.com
permitted;dirName.1=permitted_DN

[permitted_DN]
C="US"
O="Manufacturing Business"


[rootca_polsect]
#policyIdentifier = 1.1.1.1.1
CPS.1="http://repository.examplerootca.com/cps.pdf"
userNotice.1     = @customerca_notice

[ customerca_notice ]
explicitText  = "Example Root CA Certificate Policy"


[ crl_ext ]
# CRL extensions.

authorityKeyIdentifier		= keyid:always

[ v3_usr_cert ]
# Typical end-user certificate profile

keyUsage 					= critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage			= critical, clientAuth, emailProtection
basicConstraints 			= critical, CA:FALSE

subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid,issuer

authorityInfoAccess = @customerca_aia

subjectAltName				= email:john.doe@example.com

certificatePolicies=ia5org,@rootca_polsect

[ v3_www_cert ]
# Typical end-user certificate profile

keyUsage 					= critical, digitalSignature, keyEncipherment
extendedKeyUsage			= critical, serverAuth
basicConstraints 			= critical, CA:FALSE

subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid,issuer

subjectAltName				= DNS:www.test.example.com

authorityInfoAccess = @customerca_aia

certificatePolicies=ia5org,@rootca_polsect


[customerca_aia]
OCSP;URI=http://ocsp.examplepartnerca.com/
caIssuers;URI=http://repository.examplepartnerca.com/partnerca.cer
